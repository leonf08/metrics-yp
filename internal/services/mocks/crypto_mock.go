// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Crypto is an autogenerated mock type for the Crypto type
type Crypto struct {
	mock.Mock
}

// Decrypt provides a mock function with given fields: src
func (_m *Crypto) Decrypt(src []byte) ([]byte, error) {
	ret := _m.Called(src)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(src)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Encrypt provides a mock function with given fields: src
func (_m *Crypto) Encrypt(src []byte) ([]byte, error) {
	ret := _m.Called(src)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(src)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(src)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCrypto creates a new instance of Crypto. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCrypto(t interface {
	mock.TestingT
	Cleanup(func())
}) *Crypto {
	mock := &Crypto{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
