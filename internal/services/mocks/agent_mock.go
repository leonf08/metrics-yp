// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/leonf08/metrics-yp.git/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Agent is an autogenerated mock type for the Agent type
type Agent struct {
	mock.Mock
}

// GatherMetrics provides a mock function with given fields: _a0
func (_m *Agent) GatherMetrics(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMetrics provides a mock function with given fields: _a0
func (_m *Agent) GetMetrics(_a0 context.Context) (map[string]models.Metric, error) {
	ret := _m.Called(_a0)

	var r0 map[string]models.Metric
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string]models.Metric, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]models.Metric); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.Metric)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportMetrics provides a mock function with given fields: _a0
func (_m *Agent) ReportMetrics(_a0 context.Context) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAgent creates a new instance of Agent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAgent(t interface {
	mock.TestingT
	Cleanup(func())
}) *Agent {
	mock := &Agent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
